[{"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\index.js":"1","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\App.js":"2","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\reportWebVitals.js":"3","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Channel.js":"4","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Mutation.js":"5","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\CreateChannel.js":"6","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Message\\Message.js":"7","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Query.js":"8","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Home\\Home.js":"9","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Message\\TemporaryUser.js":"10"},{"size":1799,"mtime":1612850851256,"results":"11","hashOfConfig":"12"},{"size":700,"mtime":1612442788596,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1610301904929,"results":"14","hashOfConfig":"12"},{"size":1722,"mtime":1612850648797,"results":"15","hashOfConfig":"12"},{"size":1082,"mtime":1612804245917,"results":"16","hashOfConfig":"12"},{"size":3345,"mtime":1612710874234,"results":"17","hashOfConfig":"12"},{"size":3192,"mtime":1612886364133,"results":"18","hashOfConfig":"12"},{"size":887,"mtime":1612107402235,"results":"19","hashOfConfig":"12"},{"size":490,"mtime":1612443027304,"results":"20","hashOfConfig":"12"},{"size":137,"mtime":1612806561373,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"b3uxww",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"25"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"25"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\index.js",["49","50","51"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { split, HttpLink } from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\r\nimport { onError } from \"@apollo/client/link/error\";\r\n\r\n\r\n//연동할 graphql 서버의 uri를 설정해야해야 함.\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://localhost:4000/graphql\"\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://localhost:4000/subscriptions\",\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\nsplitLink.setOnError((err) =>{\r\n  console.log(\"e:\", err)\r\n})\r\n\r\n//uri를 http로 쓰니까 ws가 다 무시된건가? 온다. 옵션의 명을 잘 봐야겠다\r\nconst client = new ApolloClient({\r\n  link : splitLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n//for fetching data\r\n\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["52","53"],"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\App.js",["54","55"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport Home from './components/Home/Home';\r\nimport Channel from './components/Channel/Channel';\r\nimport Message from './components/Channel/Message/Message'\r\n\r\nfunction App({ client }) {\r\n  return (\r\n    <div className=\"App_Frame\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/Chat/colleflower/:ServerCode\" component={Channel}/>\r\n          {/* <Route path=\"/colleflower/pknu:ServerCode\" component={Message}/> */}\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\reportWebVitals.js",[],"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Channel.js",["56","57","58","59","60","61","62","63","64"],"import React, { useEffect, useState } from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport { GET_CHANNEL_LIST, GET_POST } from './Query.js';\r\nimport { CREATE_CHANNEL } from './Mutation.js';\r\nimport CreateChannel from './CreateChannel';\r\nimport Message from './Message/Message'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport './Channel.scss'\r\nimport {StudentNumber} from './Message/TemporaryUser'\r\n\r\n// Channel.js에서는 모든 Channel에 적용되는 basic 설정을 추가한다.\r\n// 채널의 제목, 설명, 채팅을 칠 수 있는 공간 등이 있다.\r\n// 입력한 사람의 이미지 및 닉네임, 게시글이 나타나야 하므로 이러한 사항을 먼저 불러온 다음, 입력할 때마다 출력을 해야할 것이다.\r\n// 게시글은 바로 아래의 컴포넌트가 될 것이다. \r\n\r\nfunction Channel() {\r\n    console.log(StudentNumber)\r\n\r\n    const param = useParams();\r\n    const { loading, data, error } = useQuery(GET_CHANNEL_LIST, {\r\n        variables: StudentNumber\r\n    });\r\n\r\n\r\n    if (loading) return <div>loading...</div>\r\n    if (error) return <div>{error}</div>\r\n    if (data) console.log(data);\r\n    return (\r\n        <div className=\"Channel_frame\">\r\n            <div className=\"Channel_Content\">\r\n                <CreateChannel />\r\n                {data.Channel.map(({ ChannelTitle, ServerCode }) =>\r\n                    <Link to={`/Chat/colleflower/${ServerCode}`}>{ChannelTitle}</Link>\r\n                )}\r\n            </div>\r\n            <div className=\"Channel_footer\">\r\n                <Message />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Channel;","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Mutation.js",["65"],"import { useQuery, gql } from '@apollo/client';\r\n// import gql from 'graphql-tag';\r\n\r\nexport const CREATE_CHANNEL = gql`\r\n    mutation CreateChannel($Host:String!, $ChannelTitle:String, $TeamMember:String, $StuNumber:String){\r\n        CreateChannel(Host: $Host, ChannelTitle:$ChannelTitle , TeamMember: $TeamMember, StuNumber:$StuNumber){\r\n            Host,\r\n            ChannelTitle,\r\n            TeamMember\r\n        }      \r\n    }\r\n`;\r\n\r\n//생각해보니 채팅방에서는 *, 일대일 채팅은 To를 명시적으로 해주면 되겠구나\r\n//\r\nexport const CREATE_MESSAGE = gql`\r\n    mutation SendMessage($MsgFrom:String!, $MsgTo:String!, $MessageContent:String!, $ServerCode:String!,$CreatedAt:String){\r\n        SendMessage(MsgFrom:$MsgFrom, MsgTo:$MsgTo, MessageContent:$MessageContent, ServerCode:$ServerCode, CreatedAt:$CreatedAt){\r\n            MsgFrom,\r\n            MsgTo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SUBSCRIPTION_MESSAGE = gql`\r\n    subscription{ \r\n        newChat{\r\n            MsgFrom\r\n            MessageContent\r\n            CreatedAt\r\n        }\r\n    }\r\n`;\r\n","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\CreateChannel.js",["66","67","68","69"],"import { useState, useRef } from 'react';\r\nimport { CREATE_CHANNEL } from './Mutation'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\n\r\nfunction CreateChannel({ n }) {\r\n\r\n    const [open, isOpen] = useState(false);\r\n    const [nickname, setNickname] = useState('');\r\n    const [title, setTitle] = useState('');\r\n\r\n    const nickNameRef = useRef();\r\n    const titleRef = useRef();\r\n\r\n    const [addChannel] = useMutation(CREATE_CHANNEL);\r\n\r\n    const handleOpen = () => {\r\n        isOpen(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        isOpen(false);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        console.log(\"dd\")\r\n        if (e.target.id === \"Host\")\r\n            setNickname(e.target.value)\r\n        else\r\n            setTitle(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={handleOpen}>채널 만들기</button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">CreateChannel</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>채널 정보를 입력해주세요.</DialogContentText>\r\n                    <TextField ref={nickNameRef}\r\n                        onChange={handleChange}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"Host\"\r\n                        label=\"Host nickname\"\r\n                        type=\"input\"\r\n                        fullWidth\r\n                    />\r\n                    <TextField ref={titleRef}\r\n                        onChange={handleChange}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"title\"\r\n                        label=\"ChannelTitle\"\r\n                        type=\"input\"\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={(e) => {\r\n                        console.log(title)\r\n                        if (nickNameRef.current.value != '' && titleRef.current.value != '') {\r\n                            addChannel({\r\n                                variables: {\r\n                                    \"Host\": nickname,\r\n                                    \"ChannelTitle\": title,\r\n                                    \"TeamMember\": nickname,\r\n                                    \"StuNumber\":\"201811111\"\r\n                                }\r\n                            })\r\n                        }\r\n                    }} color=\"primary\">\r\n                        confirm\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateChannel;","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Message\\Message.js",["70","71","72","73","74","75"],"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Query.js",["76"],"import { useQuery } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\n//채널에 대한 정보를 다 들고 옴.\r\n\r\nexport const GET_CHANNEL_LIST = gql`    \r\n    query getChannel($StuNumber:String){\r\n        Channel(StuNumber:$StuNumber){\r\n            Host\r\n            ChannelTitle\r\n            ServerCode \r\n            TeamMember \r\n        }\r\n    }\r\n`;\r\n\r\n\r\n//채널에 따른 말풍선 가져오기\r\nexport const GET_MESSAGE = gql`\r\n    query getMsg($ServerCode:String){\r\n        getMessage(ServerCode:$ServerCode){\r\n            MsgFrom,\r\n            MsgTo\r\n            CreatedAt\r\n            MessageContent\r\n            Liked\r\n            Hated\r\n            Notifying\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_COMMENT = gql`\r\n    query{\r\n        Comment(PostID : PostID){\r\n            NickName\r\n            CommentContent\r\n            PostID\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Home\\Home.js",[],"C:\\Users\\BJH\\Desktop\\Colle_flower\\client\\src\\components\\Channel\\Message\\TemporaryUser.js",[],{"ruleId":"77","severity":1,"message":"78","line":8,"column":17,"nodeType":"79","messageId":"80","endLine":8,"endColumn":25},{"ruleId":"77","severity":1,"message":"81","line":11,"column":10,"nodeType":"79","messageId":"80","endLine":11,"endColumn":28},{"ruleId":"77","severity":1,"message":"82","line":12,"column":10,"nodeType":"79","messageId":"80","endLine":12,"endColumn":17},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"77","severity":1,"message":"87","line":1,"column":8,"nodeType":"79","messageId":"80","endLine":1,"endColumn":12},{"ruleId":"77","severity":1,"message":"88","line":10,"column":8,"nodeType":"79","messageId":"80","endLine":10,"endColumn":15},{"ruleId":"77","severity":1,"message":"89","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":26},{"ruleId":"77","severity":1,"message":"90","line":1,"column":28,"nodeType":"79","messageId":"80","endLine":1,"endColumn":36},{"ruleId":"77","severity":1,"message":"91","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":16},{"ruleId":"77","severity":1,"message":"92","line":2,"column":20,"nodeType":"79","messageId":"80","endLine":2,"endColumn":26},{"ruleId":"77","severity":1,"message":"93","line":3,"column":28,"nodeType":"79","messageId":"80","endLine":3,"endColumn":36},{"ruleId":"77","severity":1,"message":"94","line":4,"column":10,"nodeType":"79","messageId":"80","endLine":4,"endColumn":24},{"ruleId":"77","severity":1,"message":"95","line":7,"column":20,"nodeType":"79","messageId":"80","endLine":7,"endColumn":31},{"ruleId":"77","severity":1,"message":"96","line":7,"column":33,"nodeType":"79","messageId":"80","endLine":7,"endColumn":45},{"ruleId":"77","severity":1,"message":"97","line":20,"column":11,"nodeType":"79","messageId":"80","endLine":20,"endColumn":16},{"ruleId":"77","severity":1,"message":"98","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":18},{"ruleId":"77","severity":1,"message":"98","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":18},{"ruleId":"77","severity":1,"message":"96","line":3,"column":33,"nodeType":"79","messageId":"80","endLine":3,"endColumn":45},{"ruleId":"99","severity":1,"message":"100","line":74,"column":55,"nodeType":"101","messageId":"102","endLine":74,"endColumn":57},{"ruleId":"99","severity":1,"message":"100","line":74,"column":87,"nodeType":"101","messageId":"102","endLine":74,"endColumn":89},{"ruleId":"77","severity":1,"message":"103","line":2,"column":16,"nodeType":"79","messageId":"80","endLine":2,"endColumn":20},{"ruleId":"77","severity":1,"message":"96","line":5,"column":33,"nodeType":"79","messageId":"80","endLine":5,"endColumn":45},{"ruleId":"77","severity":1,"message":"104","line":5,"column":64,"nodeType":"79","messageId":"80","endLine":5,"endColumn":67},{"ruleId":"105","severity":1,"message":"106","line":43,"column":7,"nodeType":"107","endLine":43,"endColumn":9,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"100","line":59,"column":54,"nodeType":"101","messageId":"102","endLine":59,"endColumn":56},{"ruleId":"99","severity":1,"message":"100","line":73,"column":29,"nodeType":"101","messageId":"102","endLine":73,"endColumn":31},{"ruleId":"77","severity":1,"message":"98","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":18},"no-unused-vars","'HttpLink' is defined but never used.","Identifier","unusedVar","'SubscriptionClient' is defined but never used.","'onError' is defined but never used.","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"'logo' is defined but never used.","'Message' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'render' is defined but never used.","'GET_POST' is defined but never used.","'CREATE_CHANNEL' is defined but never used.","'useMutation' is defined but never used.","'useLazyQuery' is defined but never used.","'param' is assigned a value but never used.","'useQuery' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'uuid' is defined but never used.","'gql' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'subscribeToMore'. Either include it or remove the dependency array.","ArrayExpression",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [subscribeToMore]",{"range":"114","text":"115"},[1516,1518],"[subscribeToMore]"]